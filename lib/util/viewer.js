/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/no-use-before-define */
import { getMostReadableTextColor } from '@opentripplanner/core-utils/lib/route'
import tinycolor from 'tinycolor2'

import { checkForRouteModeOverride } from './config'
import { getOperatorAndRoute } from './state'
import { isBlank } from './ui'

export function getSecondsUntilDeparture(stopTime, useSchedule) {
  const departureTime = useSchedule
    ? stopTime.scheduledDeparture
    : stopTime.realtimeDeparture

  return departureTime + stopTime.serviceDay - Date.now() / 1000
}

export function getRouteIdForPattern(pattern) {
  const patternIdParts = pattern.id.split(':')
  const routeId = patternIdParts[0] + ':' + patternIdParts[1]
  return routeId
}

/**
 * check if given route object from an OTP pattern is valid
 */
export function routeIsValid(route, routeId) {
  if (!route) {
    console.warn(`missing route ID: ${routeId}`)
    return false
  }
  return true
}

/**
 * heuristic & regex on pattern description to extract headsign
 */
export function extractHeadsignFromPattern(pattern, routeShortName = null) {
  let headsign = pattern.headsign
  // (format: '49 to <Destination> (<destid>)[ from <Origin> (<originid)]').
  if (isBlank(headsign)) {
    const matches = pattern?.desc?.match(/(?: to )(.*?)(?: \()/)
    if (matches) {
      headsign = matches[1]
    }
  }

  if (isBlank(headsign)) {
    const matches = pattern?.desc?.match(/ to ([^(from)]+) \(.+\)/)
    if (matches) {
      headsign = matches[1]
    }
  }

  /**
   * in case string generated by OTP doesn't include " "
   */
  if (isBlank(headsign) && routeShortName) {
    const matches = pattern?.desc?.match(/^[^(]*$/)
    if (matches) {
      headsign = matches[0].replace(`${routeShortName} `, '')
    }
  }

  if (isBlank(headsign)) {
    headsign = pattern?.desc || ''
  }

  if (isBlank(headsign)) {
    headsign = pattern?.route?.longName || ''
  }

  return headsign
}

/**
 * get mode string from an OTP Route or RouteShort model
 */
export function getModeFromRoute(route) {
  const modeLookup = {
    // eslint-disable-next-line sort-keys
    11: 'BUS',
    3: 'BUS'
  }
  return route.mode || modeLookup[route.type]
}

/**
 * get main mode from stop
 */
export const getModeFromStop = (stop, overrideConfig) => {
  const modes = [
    ...new Set(
      stop.routes?.map((route) =>
        checkForRouteModeOverride(route, overrideConfig)
      )
    )
  ]

  if (modes.length === 1) {
    return modes[0]
  }
  if (modes.length > 1) {
    const stopModeCounts = modes.reduce((modes, cur) => {
      if (!cur) {
        return modes
      }

      if (!modes[cur]) {
        modes[cur] = 0
      }
      modes[cur]++

      return modes
    }, {})

    return (
      stopModeCounts &&
      Object.keys(stopModeCounts).sort((a, b) => {
        return stopModeCounts[a] - stopModeCounts[b]
      })[0]
    )
  }
}

/**
 * find stop time corresponding to the first departure
 */
export function getFirstDepartureFromNow(stopTimes) {
  // search starting from the last stop time
  const lastStopTime = stopTimes[stopTimes.length - 1]

  let firstStopTime = lastStopTime
  stopTimes.forEach((stopTime) => {
    const firstStopTimeSeconds = getSecondsUntilDeparture(firstStopTime, true)
    const stopTimeSeconds = getSecondsUntilDeparture(stopTime, true)

    if (stopTimeSeconds < firstStopTimeSeconds && stopTimeSeconds >= 0) {
      firstStopTime = stopTime
    }
  })
  return firstStopTime
}

/**
 * enum to represent transit realtime status for trips/stop times
 */
export const REALTIME_STATUS = {
  EARLY: 'EARLY',
  LATE: 'LATE',
  ON_TIME: 'ON_TIME',
  SCHEDULED: 'SCHEDULED'
}

// adjust font size for route name
export const routeNameFontSize = (routeName) => {
  let fontSize = '20px'
  if (routeName) {
    if (routeName?.length >= 3 && routeName?.length <= 6) {
      fontSize = '16px'
    } else if (routeName?.split(' ').some((x) => x.length > 8)) {
      fontSize = '12px'
    } else if (routeName?.length > 7) {
      fontSize = '14px'
    }
  }
  return fontSize
}

/**
 * get realtime states (on-time, late...) if there is realtime info
 */
export function getTripStatus(
  isRealtime,
  delaySeconds,
  onTimeThresholdSeconds
) {
  if (isRealtime) {
    if (delaySeconds > onTimeThresholdSeconds) {
      // late departure
      return REALTIME_STATUS.LATE
    } else if (delaySeconds < -onTimeThresholdSeconds) {
      // early departure
      return REALTIME_STATUS.EARLY
    } else {
      // on-time departure
      return REALTIME_STATUS.ON_TIME
    }
  } else {
    // Schedule only
    return REALTIME_STATUS.SCHEDULED
  }
}

/**
 * returns true if itinerary first transit leg has realtime info
 */
export function firstTransitLegIsRealtime(itinerary) {
  const firstTransitLeg = itinerary.legs.find((leg) => !!leg.transitLeg)
  return firstTransitLeg?.realTime
}

/**
 * prettify route long name
 */
function getCleanRouteLongName({ longNameSplitter, route }) {
  let longName = ''
  if (route.longName) {
    const nameParts = route.longName.split(longNameSplitter)
    longName =
      longNameSplitter && nameParts.length > 1 ? nameParts[1] : route.longName
    if (longName === route.shortName) longName = ''
  }
  return longName
}
/**
 * determine color and contrast color as well as a full route name
 */
export function getColorAndNameFromRoute(operator, route) {
  const { defaultRouteColor, defaultRouteTextColor, longNameSplitter } =
    operator || {}

  const modeColors = operator?.modeColors?.[getModeFromRoute(route)]

  const backgroundColor = `#${
    modeColors?.color || defaultRouteColor || route?.color || '333333'
  }`
  const contrastColor = getMostReadableTextColor(
    backgroundColor,
    modeColors?.textColor || route?.textColor
  )
  const color = `#${defaultRouteTextColor || contrastColor}`
  const longName = getCleanRouteLongName({ longNameSplitter, route })

  const softColor = tinycolor
    .mostReadable('#fff', [
      backgroundColor,
      tinycolor(backgroundColor).brighten(10).toHexString(),
      tinycolor(backgroundColor).brighten(20).toHexString(),
      tinycolor(backgroundColor).darken(10).toHexString()
    ])
    .toHexString()

  return {
    backgroundColor,
    color,
    longName,
    softColor
  }
}

/**
 * determine route color based on config color settings
 */
export function getRouteColorBasedOnSettings(operator = {}, route = {}) {
  const { backgroundColor, softColor } = getColorAndNameFromRoute(
    operator,
    route
  )

  switch (operator.colorMode) {
    case 'disabled':
      return '#333'
    case 'gtfs-softened':
      return softColor
    default:
      return backgroundColor
  }
}

/**
 * determine if a stop being viewed is a flex stop
 */
export function stopIsFlex(stopData) {
  return (
    stopData &&
    stopData.geometries &&
    stopData.geometries.geoJson?.type !== 'Point'
  )
}

/**
 * render a Route object from leg
 */
export function generateFakeLegForRouteRenderer(
  route,
  onColoredBackground = false
) {
  return {
    agencyName: route?.agencyName || route.agency?.name,

    mode: getModeFromRoute(route),
    onColoredBackground,
    origColor: route.origColor,
    routeColor: route.color,
    routeLongName: route.longName,
    routeShortName: route.shortName,
    routeTextColor: route.textColor
  }
}

/**
 * get page title for the route and pattern viewer
 */
export function getRouteOrPatternViewerTitle(
  transitOperators,
  viewedRouteObject,
  patternId,
  intl
) {
  const { patterns, pending, shortName } = viewedRouteObject || {}

  if (!viewedRouteObject || pending) {
    return intl.formatMessage({ id: 'components.RouteViewer.title' })
  }

  const pattern = patterns?.[patternId]
  return (
    getOperatorAndRoute(viewedRouteObject, transitOperators, intl) +
    (patternId && pattern
      ? ` ${intl.formatMessage({
          id: 'components.RouteDetails.stopsTo'
        })} ${extractHeadsignFromPattern(pattern, shortName)}`
      : '')
  )
}
